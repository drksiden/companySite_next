#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –°—á–µ—Ç—á–∏–∫–∏
PASSED=0
FAILED=0
TOTAL=0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
check_result() {
    local test_name="$1"
    local result="$2"
    local details="$3"

    TOTAL=$((TOTAL + 1))

    if [ "$result" = "true" ]; then
        echo -e "‚úÖ ${GREEN}PASS${NC} $test_name"
        PASSED=$((PASSED + 1))
        if [ -n "$details" ]; then
            echo -e "    ${BLUE}‚Ñπ${NC} $details"
        fi
    else
        echo -e "‚ùå ${RED}FAIL${NC} $test_name"
        FAILED=$((FAILED + 1))
        if [ -n "$details" ]; then
            echo -e "    ${YELLOW}‚ö†${NC} $details"
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
file_exists() {
    [ -f "$1" ]
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
dir_exists() {
    [ -d "$1" ]
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
count_files() {
    find "$1" -maxdepth 1 -type f 2>/dev/null | wc -l
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤ —Ñ–∞–π–ª–∞—Ö
search_pattern() {
    local pattern="$1"
    local path="$2"
    grep -r "$pattern" "$path" 2>/dev/null | wc -l
}

echo -e "${BLUE}üîç –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞...${NC}\n"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "package.json" ] || [ ! -d "src" ]; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ Next.js${NC}"
    exit 1
fi

echo -e "${YELLOW}=== 1. –ö–õ–ò–ï–ù–¢–´ –ò –£–¢–ò–õ–ò–¢–´ ===${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ src/lib/
check_result "supabaseClient.ts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "$(file_exists "./src/lib/supabaseClient.ts")"
check_result "supabaseServer.ts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "$(file_exists "./src/lib/supabaseServer.ts")"
check_result "r2.ts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "$(file_exists "./src/lib/r2.ts")"
check_result "imageUtils.ts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "$(file_exists "./src/lib/imageUtils.ts")"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–ª–∏–µ–Ω—Ç—ã
duplicate_clients=$(search_pattern "new SupabaseClient\|createClient.*supabase" "./src/" | grep -v "src/lib/supabase" | wc -l)
check_result "–ù–µ—Ç –¥—É–±–ª–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤ Supabase" "$([ "$duplicate_clients" -eq 0 ] && echo true || echo false)" "–ù–∞–π–¥–µ–Ω–æ $duplicate_clients –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–µ–π"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
wrong_imports=$(search_pattern "from.*supabase.*createClient" "./src/" | grep -v "from.*@/lib" | wc -l)
check_result "–í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ @/lib/" "$([ "$wrong_imports" -eq 0 ] && echo true || echo false)" "–ù–∞–π–¥–µ–Ω–æ $wrong_imports –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"

echo ""
echo -e "${YELLOW}=== 2. R2 –ó–ê–ì–†–£–ó–ö–ê ===${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ä–æ—É—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
check_result "API —Ä–æ—É—Ç /api/upload —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "$(file_exists "./src/app/api/upload/route.ts")"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ upload route
if file_exists "./src/app/api/upload/route.ts"; then
    has_presigned=$(grep -q "getSignedUrl\|presigned" "./src/app/api/upload/route.ts" && echo true || echo false)
    check_result "Upload API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç presigned URL" "$has_presigned"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ ImageUploader –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
image_uploader_files=$(find ./src/ -name "*ImageUpload*" -o -name "*FileUpload*" 2>/dev/null | wc -l)
check_result "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω" "$([ "$image_uploader_files" -gt 0 ] && echo true || echo false)" "–ù–∞–π–¥–µ–Ω–æ $image_uploader_files –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"

echo ""
echo -e "${YELLOW}=== 3. –ö–ê–¢–ê–õ–û–ì ===${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
check_result "–°–µ—Ä–≤–∏—Å catalog.ts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "$(file_exists "./src/lib/services/catalog.ts")"

if file_exists "./src/lib/services/catalog.ts"; then
    has_list_products=$(grep -q "export.*function.*listProducts" "./src/lib/services/catalog.ts" && echo true || echo false)
    has_list_categories=$(grep -q "export.*function.*listCategories" "./src/lib/services/catalog.ts" && echo true || echo false)
    has_list_brands=$(grep -q "export.*function.*listBrands" "./src/lib/services/catalog.ts" && echo true || echo false)

    check_result "–ú–µ—Ç–æ–¥ listProducts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "$has_list_products"
    check_result "–ú–µ—Ç–æ–¥ listCategories —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "$has_list_categories"
    check_result "–ú–µ—Ç–æ–¥ listBrands —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "$has_list_brands"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞
catalog_apis=("products" "categories" "brands")
for api in "${catalog_apis[@]}"; do
    check_result "API /api/catalog/$api —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "$(file_exists "./src/app/api/catalog/$api/route.ts")"
done

echo ""
echo -e "${YELLOW}=== 4. UI –ö–û–ú–ü–û–ù–ï–ù–¢–´ ===${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞
catalog_components=("CatalogShell.tsx" "FiltersSidebar.tsx" "ProductGrid.tsx" "ProductCard.tsx" "SortSelect.tsx" "EmptyState.tsx" "LoadingSkeletons.tsx")
catalog_dir="./src/features/catalog/components"

if dir_exists "$catalog_dir"; then
    for component in "${catalog_components[@]}"; do
        check_result "$component —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "$(file_exists "$catalog_dir/$component")"
    done

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã
    actual_files=$(count_files "$catalog_dir")
    expected_files=$((${#catalog_components[@]} + 1)) # +1 –¥–ª—è .gitkeep
    check_result "–¢–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ" "$([ "$actual_files" -le "$expected_files" ] && echo true || echo false)" "–ù–∞–π–¥–µ–Ω–æ $actual_files —Ñ–∞–π–ª–æ–≤, –æ–∂–∏–¥–∞–ª–æ—Å—å –Ω–µ –±–æ–ª–µ–µ $expected_files"
else
    check_result "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "false"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
old_components=$(find ./src/ -name "*SimpleCatalog*" -o -name "*modern*" 2>/dev/null | wc -l)
check_result "–ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö/–¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤" "$([ "$old_components" -eq 0 ] && echo true || echo false)" "–ù–∞–π–¥–µ–Ω–æ $old_components —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"

echo ""
echo -e "${YELLOW}=== 5. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ next.config.js
if file_exists "./next.config.js"; then
    has_r2_domains=$(grep -q "r2\.dev\|r2\.cloudflarestorage" "./next.config.js" && echo true || echo false)
    check_result "R2 –¥–æ–º–µ–Ω—ã –≤ next.config.js" "$has_r2_domains"
else
    check_result "next.config.js —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "false"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env.example
check_result ".env.example —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "$(file_exists "./.env.example")"

if file_exists "./.env.example"; then
    env_vars=("NEXT_PUBLIC_SUPABASE_URL" "NEXT_PUBLIC_SUPABASE_ANON_KEY" "SUPABASE_SERVICE_ROLE_KEY" "R2_ACCOUNT_ID" "R2_ACCESS_KEY_ID" "R2_SECRET_ACCESS_KEY" "R2_BUCKET_NAME")
    missing_vars=0
    for var in "${env_vars[@]}"; do
        if ! grep -q "$var" "./.env.example"; then
            missing_vars=$((missing_vars + 1))
        fi
    done
    check_result "–í—Å–µ –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env.example" "$([ "$missing_vars" -eq 0 ] && echo true || echo false)" "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç $missing_vars –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"
fi

echo ""
echo -e "${YELLOW}=== 6. –ö–ê–ß–ï–°–¢–í–û –ö–û–î–ê ===${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript
if command -v pnpm >/dev/null 2>&1; then
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript..."
    if pnpm exec tsc --noEmit >/dev/null 2>&1; then
        check_result "TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫" "true"
    else
        check_result "TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫" "false" "–ï—Å—Ç—å –æ—à–∏–±–∫–∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ESLint
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ ESLint..."
    eslint_output=$(pnpm exec eslint . --format=compact 2>/dev/null || echo "")
    eslint_errors=$(echo "$eslint_output" | grep -c "error" || echo 0)
    check_result "ESLint –±–µ–∑ –æ—à–∏–±–æ–∫" "$([ "$eslint_errors" -eq 0 ] && echo true || echo false)" "–ù–∞–π–¥–µ–Ω–æ $eslint_errors –æ—à–∏–±–æ–∫"
else
    check_result "pnpm –¥–æ—Å—Ç—É–ø–µ–Ω" "false" "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pnpm –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"
fi

echo ""
echo -e "${YELLOW}=== 7. –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø ===${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ README.md
check_result "README.md —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "$(file_exists "./README.md")"

if file_exists "./README.md"; then
    has_setup=$(grep -qi "—É—Å—Ç–∞–Ω–æ–≤–∫–∞\|installation\|setup" "./README.md" && echo true || echo false)
    has_env_config=$(grep -qi "\.env\|environment" "./README.md" && echo true || echo false)
    has_api_examples=$(grep -qi "curl\|api.*example" "./README.md" && echo true || echo false)

    check_result "README —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ" "$has_setup"
    check_result "README —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É .env" "$has_env_config"
    check_result "README —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã API" "$has_api_examples"
fi

echo ""
echo -e "${YELLOW}=== 8. –ß–ò–°–¢–ö–ê ===${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏—à–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
unwanted_dirs=("./src/utils" "./src/features/catalog/api" "./src/features/catalog/components/modern")
for dir in "${unwanted_dirs[@]}"; do
    check_result "–ù–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $dir" "$(! dir_exists "$dir" && echo true || echo false)"
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json –Ω–∞ –ª–∏—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
if file_exists "./package.json"; then
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ª–∏—à–Ω–∏–µ –ø–∞–∫–µ—Ç—ã
    unused_deps=$(grep -E "lodash|moment|axios" "./package.json" | wc -l)
    check_result "–ù–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ª–∏—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π" "$([ "$unused_deps" -eq 0 ] && echo true || echo false)" "–ù–∞–π–¥–µ–Ω–æ $unused_deps –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ª–∏—à–Ω–∏—Ö –ø–∞–∫–µ—Ç–æ–≤"
fi

echo ""
echo -e "${YELLOW}=== 9. –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ ===${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–æ—É—Ç–æ–≤
main_routes=("./src/app/page.tsx" "./src/app/catalog/page.tsx" "./src/app/admin/page.tsx")
for route in "${main_routes[@]}"; do
    if file_exists "$route"; then
        check_result "–û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç $(basename "$route") —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "true"
    else
        check_result "–û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç $(basename "$route") —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "false"
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ middleware
check_result "Middleware —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" "$(file_exists "./middleware.ts" || file_exists "./src/middleware.ts")"

echo ""
echo -e "${BLUE}üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò${NC}"
echo -e "–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: $TOTAL"
echo -e "${GREEN}–£—Å–ø–µ—à–Ω–æ: $PASSED${NC}"
echo -e "${RED}–ù–µ—É–¥–∞—á–Ω–æ: $FAILED${NC}"

if [ "$FAILED" -eq 0 ]; then
    echo -e "\nüéâ ${GREEN}–í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.${NC}"
    exit 0
else
    echo -e "\n‚ö†Ô∏è  ${YELLOW}–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.${NC}"
    echo -e "–ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: $(( PASSED * 100 / TOTAL ))%"
    exit 1
fi
