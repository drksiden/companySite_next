// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞
// –ó–∞–ø—É—Å–∫: node debug-catalog.js

const baseUrl = 'http://localhost:3000';

async function debugCatalog() {
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤...\n');

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–∞—Ç–∞–ª–æ–≥–∞
    console.log('üìã –¢–µ—Å—Ç 1: API –∫–∞—Ç–∞–ª–æ–≥–∞');
    const catalogResponse = await fetch(`${baseUrl}/api/catalog/products?limit=5`);

    if (!catalogResponse.ok) {
      throw new Error(`Catalog API error: ${catalogResponse.status}`);
    }

    const catalogData = await catalogResponse.json();

    if (!catalogData.success) {
      console.log('‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', catalogData.error);
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${catalogData.data.products.length}`);

    // –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    catalogData.data.products.forEach((product, index) => {
      console.log(`\nüì¶ –¢–æ–≤–∞—Ä ${index + 1}: ${product.name}`);
      console.log(`‚îú‚îÄ ID: ${product.id}`);
      console.log(`‚îú‚îÄ Slug: ${product.slug}`);
      console.log(`‚îú‚îÄ Track inventory: ${product.track_inventory}`);
      console.log(`‚îú‚îÄ Inventory quantity: ${product.inventory_quantity}`);
      console.log(`‚îú‚îÄ Thumbnail: ${product.thumbnail || '–ù–ï–¢'}`);
      console.log(`‚îú‚îÄ Images count: ${product.images ? product.images.length : 0}`);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è
      const isInStock = product.track_inventory
        ? (product.inventory_quantity || 0) > 0
        : true;
      console.log(`‚îú‚îÄ –í –Ω–∞–ª–∏—á–∏–∏: ${isInStock ? '‚úÖ' : '‚ùå'}`);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (product.thumbnail) {
        console.log(`‚îú‚îÄ Thumbnail –≤–∞–ª–∏–¥–µ–Ω: ${isValidUrl(product.thumbnail) ? '‚úÖ' : '‚ùå'}`);
      }

      if (product.images && product.images.length > 0) {
        console.log(`‚îî‚îÄ Images: ${product.images.map(img => isValidUrl(img) ? '‚úÖ' : '‚ùå').join(', ')}`);
      } else {
        console.log(`‚îî‚îÄ Images: –ù–ï–¢`);
      }
    });

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    const firstProduct = catalogData.data.products[0];
    if (firstProduct) {
      console.log(`\nüìã –¢–µ—Å—Ç 2: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ "${firstProduct.slug}"`);

      const productResponse = await fetch(`${baseUrl}/api/products/${firstProduct.slug}`);

      if (productResponse.ok) {
        const productData = await productResponse.json();

        if (productData.success) {
          console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
          console.log(`‚îú‚îÄ –ù–∞–∑–≤–∞–Ω–∏–µ: ${productData.data.product.name}`);
          console.log(`‚îú‚îÄ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${productData.data.product.images ? productData.data.product.images.length : 0}`);
          console.log(`‚îú‚îÄ –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã: ${productData.data.relatedProducts ? productData.data.relatedProducts.length : 0}`);
          console.log(`‚îî‚îÄ Track inventory: ${productData.data.product.track_inventory}`);
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', productData.error);
        }
      } else {
        console.log(`‚ùå HTTP –æ—à–∏–±–∫–∞: ${productResponse.status}`);
      }
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    console.log('\nüìã –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');

    for (const product of catalogData.data.products.slice(0, 3)) {
      if (product.thumbnail) {
        console.log(`\nüñºÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${product.name}`);
        console.log(`‚îú‚îÄ URL: ${product.thumbnail}`);

        try {
          const imgResponse = await fetch(product.thumbnail, { method: 'HEAD' });
          console.log(`‚îî‚îÄ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ${imgResponse.ok ? '‚úÖ' : '‚ùå'} (${imgResponse.status})`);
        } catch (error) {
          console.log(`‚îî‚îÄ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ‚ùå (${error.message})`);
        }
      }
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–∞
    console.log('\nüìã –¢–µ—Å—Ç 4: –¢–æ–≤–∞—Ä—ã –±–µ–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–∞');

    const noTrackResponse = await fetch(`${baseUrl}/api/catalog/products?limit=10`);
    const noTrackData = await noTrackResponse.json();

    if (noTrackData.success) {
      const noTrackProducts = noTrackData.data.products.filter(p => !p.track_inventory);
      console.log(`‚îú‚îÄ –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: ${noTrackProducts.length}`);

      noTrackProducts.forEach(product => {
        const shouldBeInStock = !product.track_inventory;
        console.log(`‚îú‚îÄ ${product.name}: ${shouldBeInStock ? '‚úÖ –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏' : '‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–∫–∏'}`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error.message);
    console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:');
    console.log('‚îú‚îÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (pnpm dev)');
    console.log('‚îú‚îÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞');
    console.log('‚îî‚îÄ –í —Ç–∞–±–ª–∏—Ü–µ products –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ');
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
function isValidUrl(url) {
  if (!url || typeof url !== 'string' || url.trim() === '') return false;

  try {
    new URL(url);
    return true;
  } catch {
    return url.startsWith('/') || url.startsWith('./') || url.startsWith('../');
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏
debugCatalog();
