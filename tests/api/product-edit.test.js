// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
// –ó–∞–ø—É—Å–∫: node test-product-edit.js

const baseUrl = 'http://localhost:3000';

async function testProductEdit() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞...\n');

  try {
    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    console.log('1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏...');
    const productsResponse = await fetch(`${baseUrl}/api/admin/products?limit=5`);

    if (!productsResponse.ok) {
      throw new Error(`Products API error: ${productsResponse.status}`);
    }

    const productsData = await productsResponse.json();

    if (!productsData.products || !productsData.products.length) {
      console.log('‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    const product = productsData.products[0];
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: ${product.name} (ID: ${product.id})`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞:');
    console.log(`‚îú‚îÄ ID: ${product.id}`);
    console.log(`‚îú‚îÄ –ù–∞–∑–≤–∞–Ω–∏–µ: ${product.name}`);
    console.log(`‚îú‚îÄ Category ID: ${product.category_id}`);
    console.log(`‚îú‚îÄ Brand ID: ${product.brand_id}`);
    console.log(`‚îú‚îÄ Collection ID: ${product.collection_id}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    if (product.categories) {
      console.log(`‚îú‚îÄ –°–≤—è–∑–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${JSON.stringify(product.categories)}`);
    }
    if (product.brands) {
      console.log(`‚îú‚îÄ –°–≤—è–∑–∞–Ω–Ω—ã–π –±—Ä–µ–Ω–¥: ${JSON.stringify(product.brands)}`);
    }
    if (product.collections) {
      console.log(`‚îú‚îÄ –°–≤—è–∑–∞–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: ${JSON.stringify(product.collections)}`);
    }

    // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º (categories, brands, etc.)
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º...');
    const formDataResponse = await fetch(`${baseUrl}/api/admin/form-data?type=all`);

    if (!formDataResponse.ok) {
      throw new Error(`Form data API error: ${formDataResponse.status}`);
    }

    const formData = await formDataResponse.json();
    console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${formData.categories?.length || 0}`);
    console.log(`‚úÖ –ë—Ä–µ–Ω–¥—ã: ${formData.brands?.length || 0}`);
    console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏–∏: ${formData.collections?.length || 0}`);
    console.log(`‚úÖ –í–∞–ª—é—Ç—ã: ${formData.currencies?.length || 0}`);

    // –®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    console.log('\n3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');

    const updateFormData = new FormData();
    updateFormData.append('id', product.id);
    updateFormData.append('name', product.name + ' (–û–ë–ù–û–í–õ–ï–ù–û)');
    updateFormData.append('slug', product.slug);
    updateFormData.append('short_description', product.short_description || '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ');
    updateFormData.append('description', product.description || '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
    updateFormData.append('base_price', String(product.base_price || 100));
    updateFormData.append('category_id', product.category_id || '');
    updateFormData.append('brand_id', product.brand_id || 'null');
    updateFormData.append('collection_id', product.collection_id || 'null');
    updateFormData.append('inventory_quantity', String(product.inventory_quantity || 0));
    updateFormData.append('track_inventory', String(product.track_inventory || false));
    updateFormData.append('min_stock_level', String(product.min_stock_level || 0));
    updateFormData.append('allow_backorder', String(product.allow_backorder || false));
    updateFormData.append('is_featured', String(product.is_featured || false));
    updateFormData.append('is_digital', String(product.is_digital || false));
    updateFormData.append('status', product.status || 'active');
    updateFormData.append('sort_order', String(product.sort_order || 0));

    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    updateFormData.append('existingImages', JSON.stringify(product.images || []));

    // –î–æ–∫—É–º–µ–Ω—Ç—ã
    updateFormData.append('existingDocuments', JSON.stringify(product.documents || []));

    // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const specs = product.specifications || {};
    updateFormData.append('specifications', JSON.stringify(specs));

    // –†–∞–∑–º–µ—Ä—ã
    const dimensions = product.dimensions || {};
    updateFormData.append('dimensions', JSON.stringify(dimensions));

    console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã');

    // –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    console.log('\n4. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');

    const updateResponse = await fetch(`${baseUrl}/api/admin/products`, {
      method: 'PUT',
      body: updateFormData
    });

    console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${updateResponse.status}`);

    if (updateResponse.ok) {
      const updateResult = await updateResponse.json();
      console.log('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      console.log(`‚îú‚îÄ –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${updateResult.name}`);
      console.log(`‚îú‚îÄ ID: ${updateResult.id}`);
      console.log(`‚îî‚îÄ –°—Ç–∞—Ç—É—Å: ${updateResult.status}`);
    } else {
      const errorText = await updateResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
      console.log(`‚îú‚îÄ –°—Ç–∞—Ç—É—Å: ${updateResponse.status}`);
      console.log(`‚îú‚îÄ –ó–∞–≥–æ–ª–æ–≤–∫–∏: ${JSON.stringify(Object.fromEntries(updateResponse.headers))}`);
      console.log(`‚îî‚îÄ –û—Ç–≤–µ—Ç: ${errorText}`);

      // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
      try {
        const errorJson = JSON.parse(errorText);
        console.log('üìã JSON –æ—à–∏–±–∫–∞:', errorJson);
      } catch (e) {
        console.log('üìã –û—à–∏–±–∫–∞ –Ω–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ');
      }
    }

    // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
    const checkResponse = await fetch(`${baseUrl}/api/admin/products?limit=5`);

    if (checkResponse.ok) {
      const checkData = await checkResponse.json();
      const updatedProduct = checkData.products.find(p => p.id === product.id);

      if (updatedProduct) {
        console.log('‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
        console.log(`‚îú‚îÄ –ù–∞–∑–≤–∞–Ω–∏–µ: ${updatedProduct.name}`);
        console.log(`‚îú‚îÄ –û–ø–∏—Å–∞–Ω–∏–µ: ${updatedProduct.description?.substring(0, 50)}...`);
        console.log(`‚îú‚îÄ Category ID: ${updatedProduct.category_id}`);
        console.log(`‚îú‚îÄ Brand ID: ${updatedProduct.brand_id}`);
        console.log(`‚îî‚îÄ –°—Ç–∞—Ç—É—Å: ${updatedProduct.status}`);
      } else {
        console.log('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('‚îú‚îÄ –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω (pnpm dev)');
    console.log('‚îú‚îÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    console.log('‚îú‚îÄ –û—à–∏–±–∫–∞ –≤ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ');
    console.log('‚îú‚îÄ –ü—Ä–æ–±–ª–µ–º—ã —Å CORS');
    console.log('‚îî‚îÄ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö');

    if (error.stack) {
      console.log('\nüìã Stack trace:');
      console.log(error.stack);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testProductEdit();
