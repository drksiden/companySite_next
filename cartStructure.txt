da kss_, [26.06.2025 10:11]
CREATE TABLE orders (
  id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
  order_number varchar(50) UNIQUE NOT NULL,
  
  -- Тип клиента
  customer_type customer_type NOT NULL DEFAULT 'individual',
  
  -- Связь с пользователем (если зарегистрирован)
  customer_id uuid REFERENCES auth.users(id) NULL,
  
  -- ФИЗИЧЕСКОЕ ЛИЦО
  customer_first_name varchar(100),
  customer_last_name varchar(100),
  customer_middle_name varchar(100), -- Отчество для СНГ
  customer_phone varchar(20) NOT NULL,
  customer_email varchar(255) NOT NULL,
  
  -- ЮРИДИЧЕСКОЕ ЛИЦО
  company_name varchar(255),
  company_legal_name varchar(255), -- Полное юридическое название
  company_registration_number varchar(100), -- БИН/ИИН
  company_tax_number varchar(100), -- Налоговый номер
  company_legal_address text, -- Юридический адрес
  
  -- Контактное лицо от компании
  contact_person_name varchar(255),
  contact_person_position varchar(100),
  contact_person_phone varchar(20),
  contact_person_email varchar(255),
  
  -- Адреса доставки и выставления счетов
  shipping_address jsonb NOT NULL, -- {address, city, country, postal_code}
  billing_address jsonb, -- Может отличаться, особенно для юр.лиц
  
  -- Финансы
  subtotal numeric(12,2) NOT NULL,
  tax_amount numeric(12,2) DEFAULT 0,
  shipping_cost numeric(12,2) DEFAULT 0,
  discount_amount numeric(12,2) DEFAULT 0,
  total_amount numeric(12,2) NOT NULL,
  currency_id uuid REFERENCES currencies(id),
  
  -- НДС для юр.лиц
  vat_rate numeric(5,2) DEFAULT 0, -- 12% в Казахстане
  vat_amount numeric(12,2) DEFAULT 0,
  include_vat boolean DEFAULT false,
  
  -- Статусы
  status order_status DEFAULT 'pending',
  payment_status payment_status DEFAULT 'pending',
  fulfillment_status fulfillment_status DEFAULT 'unfulfilled',
  
  -- Дополнительная информация
  notes text, -- Комментарий клиента
  internal_notes text, -- Внутренние заметки менеджера
  preferred_delivery_time varchar(100),
  
  -- Документооборот для юр.лиц
  requires_invoice boolean DEFAULT false,
  invoice_number varchar(100),
  invoice_date date,
  
  -- Менеджер
  assigned_manager_id uuid REFERENCES user_profiles(id),
  
  -- Временные метки
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  shipped_at timestamptz,
  delivered_at timestamptz,
  cancelled_at timestamptz,
  
  -- Ограничения
  CONSTRAINT valid_individual_data CHECK (
    customer_type != 'individual' OR 
    (customer_first_name IS NOT NULL AND customer_last_name IS NOT NULL)
  ),
  CONSTRAINT valid_legal_entity_data CHECK (
    customer_type != 'legal_entity' OR 
    (company_name IS NOT NULL AND contact_person_name IS NOT NULL)
  )
);

da kss_, [26.06.2025 10:13]
CREATE TABLE order_items (
  id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
  order_id uuid REFERENCES orders(id) ON DELETE CASCADE,
  
  -- Товар (сохраняем снимок на момент заказа)
  product_id uuid REFERENCES products(id),
  variant_id uuid REFERENCES product_variants(id) NULL,
  
  -- Снимок товара на момент заказа
  product_name varchar(500) NOT NULL,
  product_sku varchar(100),
  variant_name varchar(255),
  variant_attributes jsonb, -- Размер, цвет и т.д.
  
  -- Цены и количество
  unit_price numeric(12,2) NOT NULL,
  quantity integer NOT NULL CHECK (quantity > 0),
  total_price numeric(12,2) NOT NULL,
  
  -- Дополнительно
  product_image_url varchar(500),
  
  created_at timestamptz DEFAULT now()
);

da kss_, [26.06.2025 10:14]
CREATE TABLE order_status_history (
  id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
  order_id uuid REFERENCES orders(id) ON DELETE CASCADE,
  
  status order_status NOT NULL,
  payment_status payment_status,
  fulfillment_status fulfillment_status,
  
  changed_by uuid REFERENCES user_profiles(id),
  comment text,
  
  created_at timestamptz DEFAULT now()
);

da kss_, [26.06.2025 10:14]
CREATE TABLE order_discounts (
  id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
  order_id uuid REFERENCES orders(id) ON DELETE CASCADE,
  
  code varchar(100), -- Промокод
  type discount_type NOT NULL,
  amount numeric(12,2) NOT NULL,
  description varchar(255),
  
  created_at timestamptz DEFAULT now()
);

da kss_, [26.06.2025 10:15]
CREATE TABLE shipping_methods (
  id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
  name varchar(255) NOT NULL,
  description text,
  cost numeric(12,2) NOT NULL,
  delivery_time varchar(100), -- "1-3 рабочих дня"
  is_active boolean DEFAULT true,
  created_at timestamptz DEFAULT now()
);

da kss_, [26.06.2025 10:17]
ALTER TABLE orders ADD COLUMN shipping_method_id uuid REFERENCES shipping_methods(id);

da kss_, [26.06.2025 10:17]
Добавляем shipping_method_id в orders:

da kss_, [26.06.2025 10:17]
CREATE TABLE order_documents (
  id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
  order_id uuid REFERENCES orders(id) ON DELETE CASCADE,
  
  document_type document_type NOT NULL,
  document_number varchar(100),
  file_url varchar(500),
  file_name varchar(255),
  
  generated_at timestamptz DEFAULT now(),
  generated_by uuid REFERENCES user_profiles(id)
);

da kss_, [26.06.2025 10:18]
CREATE TABLE corporate_customers (
  id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
  user_profile_id uuid REFERENCES user_profiles(id) ON DELETE CASCADE,
  
  -- Основная информация
  legal_name varchar(500) NOT NULL, -- Полное юридическое название
  trade_name varchar(255), -- Торговое название
  registration_number varchar(100) NOT NULL, -- БИН
  tax_number varchar(100),
  
  -- Адреса
  legal_address jsonb NOT NULL,
  actual_address jsonb,
  postal_address jsonb,
  
  -- Банковские реквизиты
  bank_name varchar(255),
  bank_code varchar(50),
  account_number varchar(100),
  swift_code varchar(50),
  correspondent_account varchar(100),
  
  -- Руководство
  director_name varchar(255),
  director_position varchar(100),
  
  -- Контакты
  main_phone varchar(20),
  main_email varchar(255),
  website varchar(255),
  
  -- Налогообложение
  vat_payer boolean DEFAULT false,
  tax_regime varchar(100),
  
  -- Статус
  verification_status verification_status DEFAULT 'pending',
  verified_at timestamptz,
  verified_by uuid REFERENCES user_profiles(id),
  
  -- Документы
  documents jsonb DEFAULT '[]', -- Массив документов для верификации
  
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

da kss_, [26.06.2025 10:19]
-- Для orders
CREATE INDEX idx_orders_customer_id ON orders(customer_id);
CREATE INDEX idx_orders_status ON orders(status);
CREATE INDEX idx_orders_created_at ON orders(created_at);
CREATE INDEX idx_orders_order_number ON orders(order_number);
CREATE INDEX idx_orders_customer_email ON orders(customer_email);
CREATE INDEX idx_orders_customer_type ON orders(customer_type);

-- Для order_items
CREATE INDEX idx_order_items_order_id ON order_items(order_id);
CREATE INDEX idx_order_items_product_id ON order_items(product_id);

-- Для order_status_history
CREATE INDEX idx_order_status_history_order_id ON order_status_history(order_id);

-- Для corporate_customers
CREATE INDEX idx_corporate_customers_user_profile_id ON corporate_customers(user_profile_id);
CREATE INDEX idx_corporate_customers_registration_number ON corporate_customers(registration_number);

da kss_, [26.06.2025 10:19]
Создаем функцию для автогенерации номера заказа:
CREATE OR REPLACE FUNCTION generate_order_number()
RETURNS TRIGGER AS $$
BEGIN
  NEW.order_number = 'ORD-'  TO_CHAR(NOW(), 'YYYY')  '-' || 
                     LPAD(NEXTVAL('order_number_seq')::TEXT, 6, '0');
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

da kss_, [26.06.2025 10:20]
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

da kss_, [26.06.2025 10:20]
-- Триггер для автогенерации номера заказа
CREATE TRIGGER set_order_number
  BEFORE INSERT ON orders
  FOR EACH ROW
  EXECUTE FUNCTION generate_order_number();

-- Триггер для обновления updated_at в orders
CREATE TRIGGER orders_updated_at
  BEFORE UPDATE ON orders
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Триггер для обновления updated_at в corporate_customers
CREATE TRIGGER corporate_customers_updated_at
  BEFORE UPDATE ON corporate_customers
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();