// src/app/catalog/CatalogClient.tsx
'use client';

import { useEffect, useState, useCallback } from 'react';
import { useSearchParams } from 'next/navigation';
import { ProductCard } from '@/components/catalog/ProductCard';
import { ProductFilters } from '@/components/catalog/ProductFilters';
import { CategoryCard } from '@/components/catalog/CategoryCard';
import { Breadcrumbs } from '@/components/Breadcrumbs';
import { Skeleton } from '@/components/ui/skeleton';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Search, Filter, Grid, List, AlertTriangle } from 'lucide-react';
import type {
  Category,
  Brand,
  Collection,
  ProductListResponse,
  ProductFilters as FilterType,
  ProductSortBy,
  CategoryFilter
} from '@/types/catalog';

interface CatalogClientProps {
  initialCategories?: Category[];
  initialBrands?: Brand[];
  initialCollections?: Collection[];
}

export default function CatalogClient({ 
  initialCategories = [],
  initialBrands = [],
  initialCollections = []
}: CatalogClientProps) {
  const searchParams = useSearchParams();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const [categories, setCategories] = useState<Category[]>(initialCategories);
  const [brands, setBrands] = useState<Brand[]>(initialBrands);
  const [collections, setCollections] = useState<Collection[]>(initialCollections);
  const [productData, setProductData] = useState<ProductListResponse | null>(null);
  const [categoryFilters, setCategoryFilters] = useState<CategoryFilter[]>([]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
  const [isLoading, setIsLoading] = useState(true);
  const [isLoadingProducts, setIsLoadingProducts] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ø–æ–∏—Å–∫–∞
  const [searchQuery, setSearchQuery] = useState(searchParams.get('search') || '');
  const [activeFilters, setActiveFilters] = useState<FilterType>({
    search: searchParams.get('search') || undefined,
    categories: searchParams.get('categories')?.split(',').filter(Boolean) || [],
    brands: searchParams.get('brands')?.split(',').filter(Boolean) || [],
    collections: searchParams.get('collections')?.split(',').filter(Boolean) || [],
    inStockOnly: searchParams.get('inStockOnly') === 'true',
    featured: searchParams.get('featured') === 'true'
  });
  const [sortBy, setSortBy] = useState<ProductSortBy>(
    (searchParams.get('sortBy') as ProductSortBy) || 'name_asc'
  );
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [showFilters, setShowFilters] = useState(false);
  const [currentPage, setCurrentPage] = useState(
    parseInt(searchParams.get('page') || '1')
  );

  // ==============================================
  // –ó–ê–ì–†–£–ó–ö–ê –ù–ê–ß–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•
  // ==============================================

  const loadInitialData = useCallback(async () => {
    setIsLoading(true);
    setError(null);

    try {
      const requests = [];

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
      if (initialCategories.length === 0) {
        requests.push(
          fetch('/api/catalog?action=categories')
            .then(res => res.json())
            .then(data => data.success ? setCategories(data.data) : [])
        );
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–µ–Ω–¥—ã –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
      if (initialBrands.length === 0) {
        requests.push(
          fetch('/api/catalog?action=brands')
            .then(res => res.json())
            .then(data => data.success ? setBrands(data.data) : [])
        );
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
      if (initialCollections.length === 0) {
        requests.push(
          fetch('/api/catalog?action=collections')
            .then(res => res.json())
            .then(data => data.success ? setCollections(data.data) : [])
        );
      }

      await Promise.all(requests);
      console.log('‚úÖ Initial catalog data loaded successfully');
    } catch (error) {
      console.error('‚ùå Error loading initial data:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∞');
    } finally {
      setIsLoading(false);
    }
  }, [initialCategories.length, initialBrands.length, initialCollections.length]);

  // ==============================================
  // –ó–ê–ì–†–£–ó–ö–ê –ü–†–û–î–£–ö–¢–û–í
  // ==============================================

  const loadProducts = useCallback(async () => {
    setIsLoadingProducts(true);
    setError(null);

    try {
      const params = new URLSearchParams();
      params.set('action', 'products');
      params.set('page', currentPage.toString());
      params.set('limit', '20');
      params.set('sortBy', sortBy);

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      if (activeFilters.search) {
        params.set('search', activeFilters.search);
      }
      if (activeFilters.categories?.length) {
        params.set('categories', activeFilters.categories.join(','));
      }
      if (activeFilters.brands?.length) {
        params.set('brands', activeFilters.brands.join(','));
      }
      if (activeFilters.collections?.length) {
        params.set('collections', activeFilters.collections.join(','));
      }
      if (activeFilters.inStockOnly) {
        params.set('inStockOnly', 'true');
      }
      if (activeFilters.featured) {
        params.set('featured', 'true');
      }
      if (activeFilters.priceRange) {
        if (activeFilters.priceRange.min > 0) {
          params.set('minPrice', activeFilters.priceRange.min.toString());
        }
        if (activeFilters.priceRange.max > 0) {
          params.set('maxPrice', activeFilters.priceRange.max.toString());
        }
      }

      console.log('üîç Loading products with params:', params.toString());

      const response = await fetch(`/api/catalog?${params.toString()}`);
      const data = await response.json();

      if (!response.ok || !data.success) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
      }

      setProductData(data.data);
      console.log('‚úÖ Products loaded:', data.data.products.length, 'items');
    } catch (error) {
      console.error('‚ùå Error loading products:', error);
      setError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
      setProductData(null);
    } finally {
      setIsLoadingProducts(false);
    }
  }, [activeFilters, sortBy, currentPage]);

  // ==============================================
  // –ó–ê–ì–†–£–ó–ö–ê –§–ò–õ–¨–¢–†–û–í –ö–ê–¢–ï–ì–û–†–ò–ò
  // ==============================================

  const loadCategoryFilters = useCallback(async (categoryId: string) => {
    try {
      const response = await fetch(`/api/catalog?action=category-filters&categoryId=${categoryId}`);
      const data = await response.json();

      if (data.success) {
        setCategoryFilters(data.data);
      }
    } catch (error) {
      console.error('Error loading category filters:', error);
    }
  }, []);

  // ==============================================
  // –≠–§–§–ï–ö–¢–´
  // ==============================================

  useEffect(() => {
    loadInitialData();
  }, [loadInitialData]);

  useEffect(() => {
    loadProducts();
  }, [loadProducts]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–≤–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  useEffect(() => {
    if (activeFilters.categories?.[0]) {
      loadCategoryFilters(activeFilters.categories[0]);
    } else {
      setCategoryFilters([]);
    }
  }, [activeFilters.categories, loadCategoryFilters]);

  // ==============================================
  // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
  // ==============================================

  const handleSearch = useCallback((query: string) => {
    setSearchQuery(query);
    setActiveFilters(prev => ({ ...prev, search: query || undefined }));
    setCurrentPage(1);
  }, []);

  const handleFiltersChange = useCallback((newFilters: FilterType) => {
    setActiveFilters(newFilters);
    setCurrentPage(1);
  }, []);

  const handleSortChange = useCallback((newSortBy: ProductSortBy) => {
    setSortBy(newSortBy);
    setCurrentPage(1);
  }, []);

  const handlePageChange = useCallback((page: number) => {
    setCurrentPage(page);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }, []);

  const clearAllFilters = useCallback(() => {
    setActiveFilters({});
    setSearchQuery('');
    setSortBy('name_asc');
    setCurrentPage(1);
  }, []);

  // ==============================================
  // –£–°–õ–û–í–ò–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø
  // ==============================================

  const hasActiveFilters = Object.values(activeFilters).some(value => 
    Array.isArray(value) ? value.length > 0 : !!value
  );

  const showCategories = !hasActiveFilters && categories.length > 0;
  const showProducts = productData?.products.length || 0;

  // ==============================================
  // –ó–ê–ì–†–£–ó–û–ß–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï
  // ==============================================

  if (isLoading) {
    return (
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-10 pb-10">
        <Breadcrumbs
          items={[
            { label: '–ì–ª–∞–≤–Ω–∞—è', href: '/' },
            { label: '–ö–∞—Ç–∞–ª–æ–≥', href: '/catalog' },
          ]}
          className="mb-8"
        />
        
        {/* –°–∫–µ–ª–µ—Ç–æ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
        <div className="mb-12">
          <div className="h-8 w-40 bg-muted rounded mb-6 animate-pulse" />
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4">
            {Array.from({ length: 6 }).map((_, i) => (
              <div key={i} className="h-32 bg-muted rounded animate-pulse" />
            ))}
          </div>
        </div>

        {/* –°–∫–µ–ª–µ—Ç–æ–Ω –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ */}
        <div className="grid grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
          {Array.from({ length: 8 }).map((_, i) => (
            <Skeleton key={i} className="h-[400px] w-full" />
          ))}
        </div>
      </div>
    );
  }

  // ==============================================
  // –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–°
  // ==============================================

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-10 pb-10">
      {/* –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ */}
      <Breadcrumbs
        items={[
          { label: '–ì–ª–∞–≤–Ω–∞—è', href: '/' },
          { label: '–ö–∞—Ç–∞–ª–æ–≥', href: '/catalog' },
        ]}
        className="mb-8"
      />

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between mb-8">
        <h1 className="text-3xl font-bold">–ö–∞—Ç–∞–ª–æ–≥</h1>
        
        {/* –ü–æ–∏—Å–∫ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –≤–∏–¥–∞ (–Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–∫—Ä—ã—Ç—ã) */}
        <div className="hidden lg:flex items-center gap-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
            <Input
              placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."
              value={searchQuery}
              onChange={(e) => handleSearch(e.target.value)}
              className="pl-10 w-80"
            />
          </div>
          
          <div className="flex items-center gap-2">
            <Button
              variant={viewMode === 'grid' ? 'default' : 'outline'}
              size="sm"
              onClick={() => setViewMode('grid')}
            >
              <Grid className="h-4 w-4" />
            </Button>
            <Button
              variant={viewMode === 'list' ? 'default' : 'outline'}
              size="sm"
              onClick={() => setViewMode('list')}
            >
              <List className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>

      {/* –ú–æ–±–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ */}
      <div className="lg:hidden mb-6">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
          <Input
            placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."
            value={searchQuery}
            onChange={(e) => handleSearch(e.target.value)}
            className="pl-10"
          />
        </div>
      </div>

      {/* –û—à–∏–±–∫–∞ */}
      {error && (
        <Alert variant="destructive" className="mb-8">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            {error}
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => loadProducts()}
              className="ml-4"
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </AlertDescription>
        </Alert>
      )}

      {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤) */}
      {showCategories && (
        <div className="mb-12">
          <h2 className="text-2xl font-semibold mb-6">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4">
            {categories.map(category => (
              <CategoryCard
                key={category.id}
                category={category}
                showProductCount={true}
                className="h-32"
              />
            ))}
          </div>
        </div>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="flex flex-col lg:flex-row gap-8">
        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <div className="w-full lg:w-64 shrink-0">
          <div className="sticky top-24">
            {/* –ö–Ω–æ–ø–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
            <Button
              variant="outline"
              className="lg:hidden w-full mb-4"
              onClick={() => setShowFilters(!showFilters)}
            >
              <Filter className="h-4 w-4 mr-2" />
              –§–∏–ª—å—Ç—Ä—ã
              {hasActiveFilters && (
                <span className="ml-2 bg-primary text-primary-foreground text-xs px-1.5 py-0.5 rounded-full">
                  !
                </span>
              )}
            </Button>

            {/* –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
            <div className={`${showFilters ? 'block' : 'hidden'} lg:block`}>
              <ProductFilters
                categories={categories}
                brands={brands}
                collections={collections}
                categoryFilters={categoryFilters}
                activeFilters={activeFilters}
                onFiltersChange={handleFiltersChange}
              />
              
              {hasActiveFilters && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={clearAllFilters}
                  className="w-full mt-4"
                >
                  –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                </Button>
              )}
            </div>
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ */}
        <div className="flex-1">
          {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          {(showProducts > 0 || isLoadingProducts) && (
            <div className="flex items-center justify-between mb-6">
              <div className="text-sm text-muted-foreground">
                {isLoadingProducts ? (
                  '–ó–∞–≥—Ä—É–∑–∫–∞...'
                ) : productData ? (
                  `–ù–∞–π–¥–µ–Ω–æ ${productData.pagination.total} —Ç–æ–≤–∞—Ä–æ–≤`
                ) : (
                  '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                )}
              </div>
              
              <Select value={sortBy} onValueChange={handleSortChange}>
                <SelectTrigger className="w-48">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="name_asc">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ê-–Ø)</SelectItem>
                  <SelectItem value="name_desc">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–Ø-–ê)</SelectItem>
                  <SelectItem value="price_asc">–ü–æ —Ü–µ–Ω–µ (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ)</SelectItem>
                  <SelectItem value="price_desc">–ü–æ —Ü–µ–Ω–µ (—É–±—ã–≤–∞–Ω–∏–µ)</SelectItem>
                  <SelectItem value="created_desc">–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ</SelectItem>
                  <SelectItem value="created_asc">–°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ</SelectItem>
                  <SelectItem value="featured">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ</SelectItem>
                  <SelectItem value="popularity">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ</SelectItem>
                </SelectContent>
              </Select>
            </div>
          )}

          {/* –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ */}
          {isLoadingProducts ? (
            <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
              {Array.from({ length: 8 }).map((_, i) => (
                <Skeleton key={i} className="h-[400px] w-full" />
              ))}
            </div>
          ) : productData?.products.length ? (
            <>
              <div className={`grid gap-6 ${
                viewMode === 'grid' 
                  ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4' 
                  : 'grid-cols-1'
              }`}>
                {productData.products.map((product) => (
                  <ProductCard 
                    key={product.id} 
                    product={product}
                    variant={viewMode}
                    showQuickView={true}
                    showWishlist={true}
                  />
                ))}
              </div>

              {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
              {productData.pagination.totalPages > 1 && (
                <div className="flex items-center justify-center mt-12 gap-2">
                  <Button
                    variant="outline"
                    disabled={!productData.pagination.hasPrev}
                    onClick={() => handlePageChange(currentPage - 1)}
                  >
                    –ü—Ä–µ–¥—ã–¥—É—â–∞—è
                  </Button>
                  
                  <div className="flex items-center gap-1">
                    {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
                    {Array.from({ length: Math.min(5, productData.pagination.totalPages) }, (_, i) => {
                      const startPage = Math.max(1, currentPage - 2);
                      const pageNum = startPage + i;
                      
                      if (pageNum > productData.pagination.totalPages) return null;
                      
                      return (
                        <Button
                          key={pageNum}
                          variant={pageNum === currentPage ? "default" : "outline"}
                          size="sm"
                          onClick={() => handlePageChange(pageNum)}
                        >
                          {pageNum}
                        </Button>
                      );
                    })}
                  </div>
                  
                  <Button
                    variant="outline"
                    disabled={!productData.pagination.hasNext}
                    onClick={() => handlePageChange(currentPage + 1)}
                  >
                    –°–ª–µ–¥—É—é—â–∞—è
                  </Button>
                </div>
              )}
            </>
          ) : (
            <div className="flex flex-col items-center justify-center py-16 text-center">
              <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4">
                <Search className="h-8 w-8 text-muted-foreground" />
              </div>
              <h3 className="text-lg font-semibold mb-2">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
              <p className="text-muted-foreground mb-4 max-w-md">
                {hasActiveFilters 
                  ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã'
                  : '–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤'
                }
              </p>
              {hasActiveFilters && (
                <Button onClick={clearAllFilters}>
                  –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                </Button>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}